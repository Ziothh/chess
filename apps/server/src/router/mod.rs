use rspc::{Config, Router};

mod chess;

#[derive(Clone, Copy, Debug)]
pub struct MyCtx {}

pub fn create() -> std::sync::Arc<Router<MyCtx>> {
    Router::<MyCtx>::new()
        // .middleware(|mw| mw.middleware(|mw| async move {
        //         let state = (mw.req.clone(), mw.ctx.clone(), mw.input.clone());
        //         Ok(mw.with_state(state))
        //     })
        //     .resp(|state, result| async move {
        //         println!(
        //             "[LOG] req='{:?}' ctx='{:?}'  input='{:?}' result='{:?}'",
        //             state.0, state.1, state.2, result
        //         );
        //         Ok(result)
        //     })
        // )
        .config(
            Config::new()
                .set_ts_bindings_header("/* eslint-disable */\n// THIS FILE HAS BEEN AUTO GENERATED BY THE SERVER VIA RSPC")
                // Doing this will automatically export the bindings when the `build` function is called.
                .export_ts_bindings(
                    std::path::PathBuf::from(env!("CARGO_MANIFEST_DIR")).join("./ts/bindings.ts"),
                ),
        )
        // Define a query taking a string and returning it
        .query("echo", |t| t(|_ctx, input: String| input))
        .merge("chess.", chess::router())
        .build()
        .arced()
}
