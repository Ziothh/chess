#![feature(let_chains)]

use std::net::{Ipv6Addr, SocketAddr};

use axum::routing::{get, post};
use tower_http::cors::CorsLayer;

mod router;

use crate::router::MyCtx;

const PORT: u16 = 8080;

#[tokio::main]
async fn main() -> () {
    let router = router::create();

    router
        .export_ts(
            rspc::ExportConfig::new(
                std::path::PathBuf::from(env!("CARGO_MANIFEST_DIR")).join("./ts/bindings.ts"),
            )
            .header(
                "/* eslint-disable */\n// THIS FILE HAS BEEN AUTO GENERATED BY THE SERVER VIA RSPC",
            ),
        )
        .unwrap();

    // We disable CORS because this is just an example. DON'T DO THIS IN PRODUCTION!
    let cors = CorsLayer::new()
        .allow_methods(tower_http::cors::Any)
        .allow_headers(tower_http::cors::Any)
        .allow_origin(tower_http::cors::Any);

    let app = axum::Router::new()
        .layer(cors.clone())
        .route("/", get(|| async { "Chess Server!" }))
        .route("/health", get(|| async { "OK" }))
        .nest(
            "/rspc",
            rspc_httpz::endpoint(router, |req: rspc_httpz::Request| {
                println!("Client requested operation '{}'", req.uri().path());
                MyCtx {
                    // x_demo_header: req
                    //     .headers()
                    //     .get("X-Demo-Header")
                    //     .map(|v| v.to_str().unwrap().to_string()),
                }
            })
            .axum()
            .layer(cors.clone()),
            // .endpoint(|| MyCtx {})
            // .axum()
            // .layer(CorsLayer::permissive()),
        )
        .fallback(|| async { "404 Not Found: We're past the event horizon..." });

    let addr = SocketAddr::from((Ipv6Addr::UNSPECIFIED, PORT));
    println!("listening on http://{}", addr);

    let (_tx, rx) = tokio::sync::oneshot::channel::<()>();
    axum::Server::bind(&addr)
        .serve(app.into_make_service())
        .with_graceful_shutdown(async {
            rx.await.ok();
        })
        .await
        .expect("Error whilst shutting down HTTP server!");
}
